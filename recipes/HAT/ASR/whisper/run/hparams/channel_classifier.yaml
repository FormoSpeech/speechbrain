# ################################
# Model: Whisper (Encoder-Decoder) + NLL
# Augmentation: TimeDomainSpecAugment
# Authors: Adel Moumen 2022 & 2024, Titouan Parcollet 2022
# ################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 06261950
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/whisper/<seed>
output_channel_folder: !ref <output_folder>/
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# URL for the biggest Fairseq english whisper model.
whisper_hub: openai/whisper-tiny
whisper_folder: !ref <save_folder>/whisper_checkpoint

# Normalize the english inputs with
# the same normalization done in the paper
normalized_transcripts: True

# Data files, just for test, need to be modified
data_folder: /mnt/user_forbes/datasets/sixian_reading
skip_prep: False
# train_csv: !ref <data_folder>/train/metadata_sample.csv
train_csv: !ref <data_folder>/train/metadata.csv
valid_csv: !ref <data_folder>/valid/metadata.csv
test_csv:
    - !ref <data_folder>/test/metadata.csv

ckpt_interval_minutes: 10 # save checkpoint every N min
channel_classes: 8

############################## Training Parameters #############################
freeze_encoder: True
number_of_epochs: 1
weight_decay: 0.01
lr_whisper: 1e-4
warmup_steps: 500
max_grad_norm: 2.0
sorting: ascending
precision: fp16 # bf16, fp16 or fp32
eval_precision: fp16
sampling_rate: 16_000

# With data_parallel batch_size is split into N jobs
# With DDP batch_size is multiplied by N jobs
# This setup works well with 1x 32GB GPU
batch_size: 128
test_batch_size: 256
grad_accumulation_factor: 1

# Decoding parameters
min_decode_ratio: 0.0
max_decode_ratio: 1.0
test_beam_size: 8

####################### Model Parameters #######################################

train_loader_kwargs:
    batch_size: !ref <batch_size>

valid_loader_kwargs:
    batch_size: !ref <test_batch_size>

test_loader_kwargs:
    batch_size: !ref <test_batch_size>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

output_embedding_size: 256

############################## Models ##########################################

whisper: !new:speechbrain.lobes.models.huggingface_transformers.whisper.Whisper
    source: !ref <whisper_hub>
    freeze_encoder: !ref <freeze_encoder>
    save_path: !ref <whisper_folder>
    output_all_hiddens: True
    language: "chinese"
    task: "transcribe"
    sampling_rate: !ref <sampling_rate>

# TODO: check if the model. is ok
adaptor: !new:model.adaptor_module.Adaptor
    num_layers: 4
    in_dim: 384
    hidden_dim: 128
    embedding_size: !ref <output_embedding_size>
    dropout: 0

channel_classifier: !new:model.channel_classifier.ChannelClassifier
    input_size: !ref <output_embedding_size>
    # input_size: 384
    lin_blocks: 0
    lin_neurons: 192
    out_neurons: !ref <channel_classes>


log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

# nll_loss: !name:speechbrain.nnet.losses.nll_loss

compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
    loss_fn: !new:speechbrain.nnet.losses.AdditiveAngularMargin
        margin: 0.2
        scale: 30
modules:
    whisper: !ref <whisper>
    adaptor: !ref <adaptor>
    channel_classifier: !ref <channel_classifier>


############################## Decoding & optimiser ############################

whisper_opt_class: !name:torch.optim.AdamW
    lr: !ref <lr_whisper>
    weight_decay: !ref <weight_decay>

valid_search: !new:speechbrain.decoders.seq2seq.S2SWhisperGreedySearcher
    model: !ref <whisper>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>

test_search: !new:speechbrain.decoders.seq2seq.S2SWhisperBeamSearcher
    module: [!ref <whisper>]
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>

# lr_annealing: !name:transformers.get_linear_schedule_with_warmup
#     num_warmup_steps: 11500 # 8625
#     num_training_steps: 115000 # 86250


lr_annealing_whisper: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr_whisper>
    n_warmup_steps: !ref <warmup_steps>

############################## Logging and Pretrainer ##########################

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        whisper: !ref <whisper>
        scheduler_whisper: !ref <lr_annealing_whisper>
        counter: !ref <epoch_counter>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

# train_logger: !new:speechbrain.utils.train_logger.WandBLogger
#     initializer: !name:wandb.init
#     project: whisper-ASR
